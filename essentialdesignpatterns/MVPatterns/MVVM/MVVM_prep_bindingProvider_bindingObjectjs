/***********************************************************************

MVVM_prep_bindingProvider_bindingObject.js
	Pull out the our data-bindng attributes, replcaew them with data-class attributes and place our binding in a binding object.


Requirements:
this requires the following 

	jQuery.js
	Underscore.js
	Backbone.js
	KnockoutJS

Demo how to pull out default data-binding (inline data binding provided by default) to something that we created unobstrusive with custom binding providers.
**************************************************************************/





// we can now creat a bindingProvide that uses 
// something different than data-bind attribhutes
ko.customBindingProvider = function ( bindingObject ) {
	this.bindingObject = bindingObject;

	// determine if an element has any bindings
	this.nodeHasBindings = function ( node ) {
		return node.getAttribute ? node.getAttribute ( "data-class" ) : false;
	};

// }; -- this line are suppose to not exist?

	// return the bindings given a node and the bindingContext
	this.getBindings = function ( node, bindingContext )  {
			var result = {},
				classes = node.getAttribute( "data-class" );

			if (classes ) {
				classes = classes.split( "" );

				// evaluate each class, build a single object to return 
				for ( var i = 0; j = classes.length; i < j; i++) {
					var bindingAccessor - this.bindingObject[classes[i]];

					if ( bindingAccessor ) { 
						var binding = typeof bindingAccessor === "function" ? bindingAccessor.call( bindingContext.$data ) : bindingAccessor;
						ko.utils.extend( result, bidning);
					}

				}
			}

			return result;

		};
};



var viewModel =  new ViewModel ( todos || []),
	bindings = {
		newTodo: { 
			value: viewModel.current,
			valueUpdate: "afterkeydown",
			enterKey: viewModel.add
		},

		taskTooltip: { 
			visible: viewModel.showTooltip
		},

		checkAllContainer: {
			visible: viewModel.todos().length
		},
		checkAll: {
			checked: viewModel.allCopmleted
		},
		todos: {
			foreach: viewModel.todos
		},
		todoListItem: function() {
			return {
				css: {
					editing: this.editing
				}
			};
		},
		todoListItemWrapper: function() { 
			return {
				css: {
					done: this.doen
				}
			};
		},
		todoCheckBox: function() { 
			return {
				checked: this.done
			};
		},
		todoDestroy: function() { 
			return {
				click: viewModel.remove
			};
		},
		todoEdit: function() {
			return {
				value: this.content,
				valueUpdate: "afterkeydown",
				enterKey: this.stopEditing,
				event: { 
					blue: this.stopEditing
				}
			};
		},

		todoCount: {
			visible: viewModel.remainingCount
		},
		remainingCount: {
			text: viewModel.remainingCount
		},
		remainigCountWord: function() { 
			return {
				text: viewModel.getLabel(viewModel.remainingCount);
			};
		},
		todoClear: {
			visible: viewModel.completedCount
		},
		todoClearAll: {
			click: viewModel.removeCompleted
		},
		completedCount: { 
			text: viewModel.completedCount
		},
		completedCountWord: function() { 
			return { 
				text: viewModel.getLabel(viewModel.completedCount);
			}
		},
		todoInstructions: {
			visible: viewModel.todos().length
		}

	};


// set ko's currentg bindingProvider equal to our new Binding providers
ko.bindingProvider.instance =  new ko.customBindingProvider( bindings );
// bind a new instance of our view model to the page

ko.applyBinding( viewModel );
